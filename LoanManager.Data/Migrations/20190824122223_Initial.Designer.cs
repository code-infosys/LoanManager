// <auto-generated />
using System;
using LoanManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LoanManager.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190824122223_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LoanManager.Models.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("AppShortName")
                        .HasMaxLength(50);

                    b.Property<string>("AppVersion")
                        .HasMaxLength(15);

                    b.Property<string>("FooterText")
                        .HasMaxLength(150);

                    b.Property<bool>("IsBoxedLayout");

                    b.Property<bool>("IsFixedLayout");

                    b.Property<bool>("IsToggleRightSidebar");

                    b.Property<bool>("IsToggleSidebar");

                    b.Property<string>("LoginPageBackground")
                        .HasMaxLength(100);

                    b.Property<string>("Logo")
                        .HasMaxLength(100);

                    b.Property<string>("Skin")
                        .HasMaxLength(20);

                    b.Property<string>("TimeZone")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AppSetting");
                });

            modelBuilder.Entity("LoanManager.Models.GeneralSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("SettingGroup")
                        .HasMaxLength(50);

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("GeneralSetting");
                });

            modelBuilder.Entity("LoanManager.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MenuIcon")
                        .HasMaxLength(100);

                    b.Property<string>("MenuText")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MenuURL")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("LoanManager.Models.MenuPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCreate");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsRead");

                    b.Property<bool>("IsUpdate");

                    b.Property<int?>("MenuId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("SortOrder");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("LoanManager.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddedBy");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool?>("IsRead");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("ProcessToUrl")
                        .HasMaxLength(400);

                    b.Property<int?>("TableId");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("ToRoleId");

                    b.Property<int?>("ToUserId");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("LoanManager.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("LoanManager.Models.RoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("LoanManager.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ChangePasswordCode")
                        .HasMaxLength(100);

                    b.Property<string>("ClockTest")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FullName")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsConfirm");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("OnTime")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("RoleId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("LoanManager.Models.Menu", b =>
                {
                    b.HasOne("LoanManager.Models.Menu", "Menu2")
                        .WithMany("Menu_ParentIds")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LoanManager.Models.MenuPermission", b =>
                {
                    b.HasOne("LoanManager.Models.Menu", "Menu_MenuId")
                        .WithMany("MenuPermission_MenuIds")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LoanManager.Models.Role", "Role_RoleId")
                        .WithMany("MenuPermission_RoleIds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LoanManager.Models.User", "User_UserId")
                        .WithMany("MenuPermission_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LoanManager.Models.RoleUser", b =>
                {
                    b.HasOne("LoanManager.Models.Role", "Role_RoleId")
                        .WithMany("RoleUser_RoleIds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LoanManager.Models.User", "User_UserId")
                        .WithMany("RoleUser_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
